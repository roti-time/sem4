#include <iostream>
#include <sys/wait.h>
#include <unistd.h>
#include <ctime>
#include <string.h>
using namespace std;

int main()
{
    int n;
    cout << "Enter the number of child processes: ";
    cin >> n;
    while (n < 1 || n > 10)
    {
        cout << "Enter a valid number of child processes (between 1 and 10): ";
        cin >> n;
    }
    int pipefd[2];
    if (pipe(pipefd) == -1)
    {
        cout << "Error in pipe";
        return 1;
    }
    int res[10] = {0};
    for (int i = 0; i < n; i++)
    {
        pid_t pid = fork();
        if (pid == 0)
        {
            srand(time(0) + i + getpid()); // Ensure each child process has a unique seed
            int x = rand() % 10 + 1;
            close(pipefd[0]); // Close the read end of the pipe in the child process
            write(pipefd[1], &x, sizeof(x)); // Write random number to pipe
            close(pipefd[1]); // Close the write end of the pipe in the child process
            return 0; // Exit the child process after writing to the pipe
        }
    }
    close(pipefd[1]); // Close the write end of the pipe in the parent process

    for (int i = 0; i < n; i++)
    {
        int x;
        read(pipefd[0], &x, sizeof(x)); // Read from pipe
        res[x]++;
    }
    close(pipefd[0]); // Close the read end of the pipe in the parent process

    int max = 0;
    int count=0;
    for (int i = 0; i < 10; i++)
    {
        cout << res[i] << " ";
    
        if(res[i]== 0){
            count++;
        }
    }
    cout << endl;
    cout << max << " is the highest number generated by " << count << " Childs." << endl;
    return 0;
}
